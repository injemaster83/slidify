setnames(a6_s5,c("rutsd_integrado","periodo_integrado","v1","v2"))
View(a6_s5[a6_s5$v1!=a6_s5$v2,])
View(a6_s5[a6_s5$v1!=a6_s5$v2,])
library(swirl)
swirl()
swirl()
l_nor <- lm(dependent ~ independent,data=galton)
l_nor <- lm(dependent ~ independent,data=freqData)
names(galton)
l_nor <- lm(gch_nor ~ gpa_nor)
names(galton)
fit <- lm(child ~ parent, galton)
sum(fit$residuals)/(n-2)
sum(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(galton$child)
sRes <- deviance(object = fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
lm(Volume ~ Girth + Height + Constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
cor(Examination,Education,swiss)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination+swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec, swiss)
efit-fit
efit$coef-fit$coef
all$coefficients-efit$coefficients
a <- fread("E:/Miguel/020_Cignifi Telefónica/Base_Celulares_20131211_A.txt",header=T,sep="\t")
library(data.table)
a <- fread("E:/Miguel/020_Cignifi Telefónica/Base_Celulares_20131211_A.txt",header=T,sep="\t")
View(a[1:100,])
View(a[1:100,])
library(readr)
install.packages("readr")
library(readr)
a <- read_fwf("E:/Miguel/020_Cignifi Telefónica/Base_Celulares_20131211_A.txt",fwf_widths(c(16, 10, 10, 14, 11, 15)))
View(a[1:100,])
a <- read_fwf("E:/Miguel/020_Cignifi Telefónica/Base_Celulares_20131211_A.txt",fwf_widths(c(16, 10, 10, 14, 11, 8)),col_names=TRUE)
a <- read_fwf("E:/Miguel/020_Cignifi Telefónica/Base_Celulares_20131211_A.txt",fwf_widths(c(16, 10, 10, 14, 11, 8)),skip=1)
getwd()
View(a[1:100,])
setnames(a,c("Id","celular","FEC_FONO","account_type","status","activation_date"))
View(a[1:100,])
nrow(a)
View(a[1:100,])
nrow(a[a$status!="?",])
table(a$status)
View(a[1:100,])
table(a$account_type)
View(a[1:100,])
tables(a$account_type)
tables(a$account_type)
View(as.data.table(table(a$account_type)))
View(as.data.table(table(a$account_type)))
length(unique(a$Id))
length(a$Id)
View(a[1:100,])
data(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
?ToothGrowth
ToothGrowth$len[ToothGrowth$supp=="OJ"]
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"],ToothGrowth$len[ToothGrowth$supp=="VC"],paired = TRUE)
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"]-ToothGrowth$len[ToothGrowth$supp=="VC"])
g1 <- ToothGrowth$len[ToothGrowth$supp=="OJ"]
g2 <- ToothGrowth$len[ToothGrowth$supp=="VC"]
t.test(g1-g2)
mean(g1-g2) + c(-1,1)*qt(.975,n-1) * sd(g1-g2) / sqrt(n)
n <- 30
mean(g1-g2) + c(-1,1)*qt(.975,n-1) * sd(g1-g2) / sqrt(n)
data(ToothGrowth)
ToothGrowth$supp <- as.factor(ToothGrowth$supp)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
g1 <- ToothGrowth$len[ToothGrowth$dose=="0.5"]
g2 <- ToothGrowth$len[ToothGrowth$dose=="1"]
g3 <- ToothGrowth$len[ToothGrowth$dose=="2"]
n <- 20
# Confidence interval of the differences using t test
mean(g1-g2) + c(-1,1)*qt(.975,n-1) * sd(g1-g2) / sqrt(n)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g1-g2)
# Confidence interval of the differences using t test
mean(g1-g3) + c(-1,1)*qt(.975,n-1) * sd(g1-g3) / sqrt(n)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g1-g3)
# Confidence interval of the differences using t test
mean(g2-g3) + c(-1,1)*qt(.975,n-1) * sd(g2-g3) / sqrt(n)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g2-g3)
t.test(len ~ supp+dose, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
t.test(g1-g2, paired = FALSE, var.equal = FALSE)
rm(list=ls())
data(ToothGrowth)
ToothGrowth$supp <- as.factor(ToothGrowth$supp)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
g11 <- ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="0.5"]
g12 <- ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="1"]
g13 <- ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="2"]
g21 <- ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="0.5"]
g22 <- ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="1"]
g23 <- ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="2"]
n11 <- length(ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="0.5"])
n11
n12 <- length(ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="1"])
n13 <- length(ToothGrowth$len[ToothGrowth$supp=="OJ" & ToothGrowth$dose=="2"])
n21 <- length(ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="0.5"])
n22 <- length(ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="1"])
n23 <- length(ToothGrowth$len[ToothGrowth$supp=="VC" & ToothGrowth$dose=="2"])
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g13, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g13, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g13-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g13-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g13, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g11-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g13, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g12-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g13-g21, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g13-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g13-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g21-g22, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g21-g23, paired = FALSE, var.equal = FALSE)
# Hypothesis test (null hypothesis: differences between the mean of both groups is zero)
t.test(g22-g23, paired = FALSE, var.equal = FALSE)
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
class(t.test(g11-g12, paired = FALSE, var.equal = FALSE))
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$t
t.test(g11-g12, paired = FALSE, var.equal = FALSE)
?htest
a <- t.test(g11-g12, paired = FALSE, var.equal = FALSE)
a[1]
a[2]
a[3]
a[4]
a$conf.int
a$pvalue
a$p.value
a[9]
a[8]
a[7]
a[6]
a[5]
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int[1]
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int[2]
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int[3]
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int[4]
t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int
class(t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int)
length(t.test(g11-g12, paired = FALSE, var.equal = FALSE)$conf.int)
library(data.table)
sbif <- fread("C:/Users/mduarte/Desktop/sbif_2014_2015.txt",sep="\t",header=T)
sbif$marca <- 1
table(sbif$excluido)
length(is.na(sbif$deuda_directa_vigente))
nrow(sbif[is.na(sbif$deuda_directa_vigente),])
length(sbif[is.na(sbif$deuda_directa_vigente),])
length(sbif[is.na(sbif$deuda_directa_vigente),,with=F])
sbif[is.na(sbif$deuda_directa_vigente),,with=F]
nrow(sbif[is.na(sbif$deuda_directa_vigente),])
is.na(sbif$deuda_directa_vigente)
sbif[is.na(sbif$deuda_directa_vigente),]
length(is.na(sbif$deuda_directa_vigente)==TRUE)
is.na(sbif$deuda_directa_vigente)
table(is.na(sbif$deuda_directa_vigente))
sbif$excluido <- ifelse(deuda_directa_vigente==0,0,1)
sbif$excluido <- ifelse(sbif$deuda_directa_vigente==0,0,1)
table(sbif$excluido)
table(sbif$sbif)
names(sbif)
library(data.table)
sbif <- fread("C:/Users/mduarte/Desktop/sbif_2014_2015.txt",sep="\t",header=T)
table(sbif$excluido)
summary <- sbif[,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif <- sbif[sbif==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_excl <- sbif[sbif==1 & excluido==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_no_excl <- sbif[sbif==1 & excluido==0,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
View(summary_sbif_excl)
View(summary_sbif_no_excl)
View(summary_sbif_excl)
options(scipen=9)
View(summary_sbif_excl)
View(sbif[1:100,])
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
View(summary_sbif_excl)
a <- "já"
a
rm(a)
library(data.table)
options(scipen=9)
sbif <- fread("C:/Users/mduarte/Desktop/sbif_2014_2015.txt",sep="\t",header=T)
summary <- sbif[,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif <- sbif[sbif==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_excl <- sbif[sbif==1 & excluido==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_no_excl <- sbif[sbif==1 & excluido==0,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
View(summary_sbif_excl)
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
library(data.table)
options(scipen=9)
sbif <- fread("C:/Users/mduarte/Desktop/sbif_2014_2015.txt",sep="\t",header=T)
summary <- sbif[,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif <- sbif[sbif==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_excl <- sbif[sbif==1 & excluido==1,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
summary_sbif_no_excl <- sbif[sbif==1 & excluido==0,lapply(.SD, sum, na.rm=TRUE),by=list(periodo_integrado,segmento),.SDcols=c("marca","PE_efectiva","PE_contingente")]
View(summary_sbif_excl)
View(summary_sbif_excl)
library(data.table)
options(scipen=9)
sbif <- fread("C:/Users/mduarte/Desktop/sbif_2014_2015.txt",sep="\t",header=T)
View(sbif[1:100,])
View(sbif[1:100,])
library(swirl)
swirl()
est <- summary(fit)[x,1]
est <- summary(fit)[,1]
est <- InsectSprays[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
fit <- lm(count ~ spray - 1,data=InsectSprays)
nfit <- lm(count ~ spray - 1,data=InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2 - 1,data=InsectSprays)
fit2 <- lm(count ~ spray2,data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Year ~ Numeric, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fit <- lm(y ~ x, out2[-1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(resid(fit)/fit$df)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Statistical_Inference")
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
library(swirl)
?InstallCourses
install_from_swirl("Statistical Inference")
library(swirl)
install_course_zip("C:/Users/mduarte/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Statistical Inference")
swirl()
33/36
deck
52
1/13
0
3/13
2/51
0.64
0.64
mypdf
integrate(mypdf,lower = 0,upper = 1.6)
sqrt(2)
(0.997*0.001)/(0.997*0.001+(1-0.985)*(1-0.001))
0.997*0.001
(1-0.985)*(1-0.001)
(0.997*0.001)/(0.997*0.001+(1-0.985)*(1-0.001))
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5 *( edh+edl )
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
library("acepack", lib.loc="C:/Program Files/R/R-3.1.3/library")
library("assertthat", lib.loc="C:/Program Files/R/R-3.1.3/library")
install.packages(c("curl", "ggplot2", "git2r", "Hmisc", "jsonlite", "lubridate", "manipulate", "MASS", "Matrix", "mgcv", "pbkrtest", "R.utils", "rattle", "roxygen2", "rstudioapi", "stringi", "xtable"))
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
training$SuperPlasticizer[1:10]
names(training)
hist(training$Superplasticizer)
summary(training$Superplasticizer)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training)
substring(names(training),1,2)
substring(names(training),1,2)=='IL'
training[,substring(names(training),1,2)=='IL']
a <- preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.9)
a
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
predictors
c('diagnosis',substring(names(training),1,2)=='IL')
c('diagnosis',substring(names(training),1,2)=='IL')
substring(names(training),1,2)=='IL'
data1 <- adData[,substring(names(training),1,2)=='IL']
View(data1)
substring(names(training),1,2)=='IL'
data1 <- adData[,substring(names(training),1,2)=='IL' | names(training)='diagnosis']
data1 <- adData[,substring(names(training),1,2)=='IL' | names(training)=='diagnosis']
View(data1)
preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8)
class(preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8))
b <- predict.preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8)
p2 <- preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8)
data2 <- predict(p2,training[,substring(names(training),1,2)=='IL'])
View(data2)
data2 <- predict(p2,training[,substring(names(training),1,2)=='IL' | names(training)=='diagnosis'])
View(data2)
rm(p2)
data2 <- predict(preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8)
, training[,substring(names(training),1,2)=='IL' | names(training)=='diagnosis'])
View(data2)
rownames(data2) <- NULL
View(data2)
View(data1)
data1[,-diagnosis]
data1[,-c("diagnosis")]
data1[,-"diagnosis"]
data1[,"diagnosis"]
data1[,-"diagnosis"]
names(data1)!="diagnosis"
data1[,names(data1)!="diagnosis"]
fit1 <- train(x=data1[,names(data1)!="diagnosis"], y = data1$diagnosis, method="glm", family="binomial")
train(x=data1[,names(data1)!="diagnosis"], y = data1$diagnosis, method="glm", family="binomial")
fit1 <- train(diagnosis ~ ., data=data1, method="glm", family="binomial")
install.packages('e1071', dependencies=TRUE)
fit1 <- train(diagnosis ~ ., data=data1, method="glm", family="binomial")
fit1$Accuracy
summary(fit1)
fit1 <- train(diagnosis ~ ., data=data1, metric="Accuracy", method="glm", family="binomial")
summary(fit1)
fit1 <- train(diagnosis ~ ., data=data1, method="glm", family="binomial")
summary(fit1)
fit1 <- train(diagnosis ~ ., data=data1, trControl=fitControl, method="glm", family="binomial")
fit1
fit2 <- train(diagnosis ~ ., data=data2, method="glm", family="binomial")
fit2
summary(fit2)
data1 <- training[,substring(names(training),1,2)=='IL' | names(training)=='diagnosis']
fit1 <- train(diagnosis ~ ., data=data1, method="glm", family="binomial")
fit1
predict(fit,newdata = testing)
predict(fit1,newdata = testing)
predict(fit1,newdata = testing,type="prob")
pred1 <- predict(fit1,newdata = testing)
confusionMatrix(data = pred1, testing$diagnosis)
fit2 <- train(diagnosis ~ ., data=data2, method="glm", family="binomial")
pred2 <- predict(fit2,newdata = testing)
confusionMatrix(data = pred2, testing$diagnosis)
fit2 <- train(diagnosis ~ ., data=data2, method="glm", family="binomial")
pred2 <- predict(fit2,newdata = testing)
pred2 <- predict(fit2,newdata = testing)
fit2 <- train(diagnosis ~ ., data=data2, method="glm", family="binomial")
fit2
pred2 <- predict(fit2,newdata = data2)
confusionMatrix(data = pred2, testing$diagnosis)
data2_test <- predict(preProcess(training[,substring(names(training),1,2)=='IL'],method = "pca",thresh = 0.8)
, testing[,substring(names(testing),1,2)=='IL' | names(testing)=='diagnosis'])
View(data2_test)
rownames(data2_test) <- NULL
pred2 <- predict(fit2,newdata = data2_test)
confusionMatrix(data = pred2, testing$diagnosis)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
install_github('slidify','ramnathv')
install_github('slidifyLibrary','ramnathv')
library(slidify)
library(slidify)
setwd("E:/Miguel/Miguel/ecursos/Specialization/Developing Data Products")
author("Example")
slidify("index.Rmd")
install_github('slidifyLibrary','ramnathv')
install_github('ramnathv/slidifyLibrary')
install_github("slidifyLibraries", "ramnathv")
slidify("index.Rmd")
